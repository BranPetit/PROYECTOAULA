@page "/responsables"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gestión de Responsables</PageTitle>

<!-- ENCABEZADO PRINCIPAL -->
<div class="d-flex align-items-center mb-3">
    <i class="bi bi-people-fill fs-3 text-primary me-2"></i>
    <h3 class="mb-0 fw-bold">Gestión de Responsables</h3>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso shadow-sm mb-3" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>@mensaje
    </div>
}

<!-- BLOQUE FORMULARIO -->
<div class="card border-primary shadow-sm mb-4">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-pencil-square me-2"></i>Formulario de Responsable
    </div>

    <div class="card-body">
        <div class="d-flex flex-wrap gap-2 mb-3">
            <button class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <i class="bi bi-wifi"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="CargarResponsables">
                <i class="bi bi-list"></i>
            </button>
            <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser"></i>
            </button>
        </div>

        <div class="input-group mb-4">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <InputNumber class="form-control" placeholder="Ingrese ID de responsable" @bind-Value="idBusqueda" />
            <button class="btn btn-secondary" @onclick="BuscarPorId">
                <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>

        <EditForm Model="responsableActual" OnValidSubmit="GuardarSegunEstado">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Tipo de Responsable *</label>
                    <InputSelect class="form-select" @bind-Value="responsableActual.IdTipoResponsable">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var t in listaTipos)
                        {
                            <option value="@t.Id">@t.Titulo</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => responsableActual.IdTipoResponsable)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Usuario *</label>
                    <InputSelect class="form-select" @bind-Value="responsableActual.IdUsuario">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var u in listaUsuarios)
                        {
                            <option value="@u.Id">@u.Email</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => responsableActual.IdUsuario)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Nombre *</label>
                    <InputText class="form-control" @bind-Value="responsableActual.Nombre" />
                    <ValidationMessage For="@(() => responsableActual.Nombre)" />
                </div>
            </div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i>
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarResponsable" disabled="@(!existeResponsable)">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeResponsable)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- BLOQUE LISTA -->
<div class="card border-primary shadow-sm">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-table me-2"></i>Lista de Responsables
    </div>

    <div class="card-body">
        @if (cargando)
        {
            <p><em><i class="bi bi-arrow-repeat"></i> Cargando responsables...</em></p>
        }
        else if (listaResponsables.Count == 0)
        {
            <div class="alert alert-info mb-0">
                <i class="bi bi-info-circle me-2"></i>No hay responsables registrados.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Tipo</th>
                            <th>Usuario</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in listaResponsables)
                        {
                            <tr>
                                <td>@r.Id</td>
                                <td>@r.Nombre</td>
                                <td>@(GetTipoNombre(r.IdTipoResponsable))</td>
                                <td>@(GetUsuarioNombre(r.IdUsuario))</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(r))">
                                        <i class="bi bi-upload"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Responsable> listaResponsables = new();
    private List<TipoResponsable> listaTipos = new();
    private List<Usuario> listaUsuarios = new();
    private Responsable responsableActual = new();
    private int idBusqueda;
    private bool existeResponsable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/responsable";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas();
        await CargarResponsables();
    }

    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var respTipos = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>("api/tiporesponsable");
            var respUsuarios = await cliente.GetFromJsonAsync<RespuestaApi<List<Usuario>>>("api/usuario");
            listaTipos = respTipos?.Datos ?? new();
            listaUsuarios = respUsuarios?.Datos ?? new();
        }
        catch
        {
            listaTipos = new();
            listaUsuarios = new();
        }
    }

    private async Task CargarResponsables()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(urlBaseApi);
            listaResponsables = resp?.Datos ?? new();
            mensaje = $"Se cargaron {listaResponsables.Count} responsable(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar responsables: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un responsable con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeResponsable = false;
                textoBotonGuardar = "Crear";
                responsableActual = new Responsable();
                return;
            }

            responsableActual = respuesta.Datos.First();
            existeResponsable = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Responsable cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeResponsable)
            await ActualizarResponsable();
        else
            await CrearResponsable();
    }

    private async Task CrearResponsable()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var payload = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };
            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Responsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarResponsable()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}";
            var payload = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };
            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Responsable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (responsableActual.Id == 0) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el responsable '{responsableActual.Nombre}' (ID {responsableActual.Id})?");
        if (confirmado)
            await EliminarResponsable(responsableActual.Id);
    }

    private async Task EliminarResponsable(int id)
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Responsable eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Responsable r)
    {
        responsableActual = new Responsable
        {
            Id = r.Id,
            IdTipoResponsable = r.IdTipoResponsable,
            IdUsuario = r.IdUsuario,
            Nombre = r.Nombre
        };
        existeResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Responsable cargado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        responsableActual = new Responsable();
        existeResponsable = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
    }

    private string GetTipoNombre(int id)
        => listaTipos.FirstOrDefault(x => x.Id == id)?.Titulo ?? $"#{id}";

    private string GetUsuarioNombre(int id)
        => listaUsuarios.FirstOrDefault(x => x.Id == id)?.Email ?? $"#{id}";
}
