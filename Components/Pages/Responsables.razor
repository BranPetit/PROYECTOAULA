@page "/responsables"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Responsables</PageTitle>

<h3>Gestión de Responsables</h3>

<!-- Botones globales -->
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarResponsables">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<!-- Buscador por ID -->
<div class="mb-3 d-flex gap-2">
    <InputNumber class="form-control" placeholder="Ingrese ID para buscar" @bind-Value="idBusqueda" />
    <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
</div>

<!-- Mensajes de estado -->
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Responsable</h4>

<EditForm Model="responsableActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Tipo Responsable *</label>
            <InputSelect class="form-select" @bind-Value="responsableActual.IdTipoResponsable">
                <option value="0">-- Seleccione --</option>
                @foreach (var t in listaTiposResponsable)
                {
                    <option value="@t.Id">@t.Titulo</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => responsableActual.IdTipoResponsable)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Usuario *</label>
            <InputSelect class="form-select" @bind-Value="responsableActual.IdUsuario">
                <option value="0">-- Seleccione --</option>
                @foreach (var u in listaUsuarios)
                {
                    <option value="@u.Id">@u.Email</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => responsableActual.IdUsuario)" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Nombre *</label>
            <InputText class="form-control" @bind-Value="responsableActual.Nombre" />
            <ValidationMessage For="@(() => responsableActual.Nombre)" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarResponsable" disabled="@(!existeResponsable)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeResponsable)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando responsables...</em></p>
}
else if (listaResponsables.Count == 0)
{
    <p>No hay responsables disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tipo</th>
                <th>Usuario</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in listaResponsables)
            {
                <tr>
                    <td>@r.Id</td>
                    <td>@(GetTipoTitulo(r.IdTipoResponsable))</td>
                    <td>@(GetUsuarioEmail(r.IdUsuario))</td>
                    <td>@r.Nombre</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(r))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // listas para tabla y selects
    private List<Responsable> listaResponsables = new();
    private List<TipoResponsable>? listaTiposResponsable = new();
    private List<Usuario>? listaUsuarios = new();

    // modelo del formulario
    private Responsable responsableActual { get; set; } = new();

    private int idBusqueda { get; set; }
    private bool existeResponsable = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/responsable";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas(); // Tipos y Usuarios
        await CargarResponsables();
    }

    // Carga de datos maestros para selects
    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var clienteTipo = fabricaHttp.CreateClient("ApiTipoResponsable");
            var respTipo = await clienteTipo.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>("api/tiporesponsable");
            listaTiposResponsable = respTipo?.Datos ?? new();

            var clienteUsuario = fabricaHttp.CreateClient("ApiUsuario");
            var respUser = await clienteUsuario.GetFromJsonAsync<RespuestaApi<List<Usuario>>>("api/usuario");
            listaUsuarios = respUser?.Datos ?? new();
        }
        catch
        {
            // no bloquear; los selects pueden quedar vacíos si falla
        }
    }

    private async Task CargarResponsables()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(urlBaseApi);
            listaResponsables = respuesta?.Datos ?? new();
            mensaje = $"Se cargaron {listaResponsables.Count} responsable(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un responsable con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeResponsable = false;
                textoBotonGuardar = "Crear";
                responsableActual = new Responsable();
                return;
            }

            responsableActual = respuesta.Datos.First();
            existeResponsable = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Responsable cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeResponsable)
            await ActualizarResponsable();
        else
            await CrearResponsable();
    }

    private async Task CrearResponsable()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");

            var payload = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Responsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarResponsable()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}";

            var payload = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };

            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el responsable con ID {responsableActual.Id}?");
        if (confirmado)
            await EliminarResponsable();
    }

    private async Task EliminarResponsable()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var ruta = $"{urlBaseApi}/id/{responsableActual.Id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiResponsable");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Responsable r)
    {
        responsableActual = new Responsable
        {
            Id = r.Id,
            IdTipoResponsable = r.IdTipoResponsable,
            IdUsuario = r.IdUsuario,
            Nombre = r.Nombre
        };
        existeResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Responsable cargado desde listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        responsableActual = new Responsable();
        responsableActual.Id = 0;
        existeResponsable = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    // helpers para mostrar texto en tabla (evitan null refs)
    private string GetTipoTitulo(int idTipo)
    {
        var t = listaTiposResponsable?.FirstOrDefault(x => x.Id == idTipo);
        return t is null ? $"#{idTipo}" : t.Titulo;
    }

    private string GetUsuarioEmail(int idUsuario)
    {
        var u = listaUsuarios?.FirstOrDefault(x => x.Id == idUsuario);
        return u is null ? $"#{idUsuario}" : u.Email;
    }
}