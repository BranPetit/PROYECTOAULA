@page "/presupuestos"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gestión de Presupuestos</PageTitle>

<!-- ENCABEZADO PRINCIPAL -->
<div class="d-flex align-items-center mb-3">
    <i class="bi bi-cash-stack fs-3 text-success me-2"></i>
    <h3 class="mb-0 fw-bold">Gestión de Presupuestos</h3>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso shadow-sm mb-3" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>@mensaje
    </div>
}

<!-- BLOQUE FORMULARIO -->
<div class="card border-success shadow-sm mb-4">
    <div class="card-header bg-success text-white fw-bold">
        <i class="bi bi-pencil-square me-2"></i>Formulario de Presupuesto
    </div>

    <div class="card-body">
        <div class="d-flex flex-wrap gap-2 mb-3">
            <button class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <i class="bi bi-wifi"></i>
            </button>
            <button class="btn btn-outline-success" @onclick="CargarPresupuestos">
                <i class="bi bi-list"></i>
            </button>
            <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser"></i>
            </button>
        </div>

        <div class="input-group mb-4">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <InputNumber class="form-control" placeholder="Ingrese ID del presupuesto" @bind-Value="idBusqueda" />
            <button class="btn btn-secondary" @onclick="BuscarPorId">
                <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>

        <EditForm Model="presupuestoActual" OnValidSubmit="GuardarSegunEstado">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Proyecto *</label>
                    <InputSelect class="form-select" @bind-Value="presupuestoActual.IdProyecto">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var p in listaProyectos)
                        {
                            <option value="@p.Id">@p.Titulo</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => presupuestoActual.IdProyecto)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Monto Solicitado *</label>
                    <InputNumber class="form-control" @bind-Value="presupuestoActual.MontoSolicitado" />
                    <ValidationMessage For="@(() => presupuestoActual.MontoSolicitado)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Monto Aprobado</label>
                    <InputNumber class="form-control" @bind-Value="presupuestoActual.MontoAprobado" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Estado</label>
                    <InputSelect class="form-select" @bind-Value="presupuestoActual.Estado">
                        <option value="Pendiente">Pendiente</option>
                        <option value="Aprobado">Aprobado</option>
                        <option value="Rechazado">Rechazado</option>
                    </InputSelect>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Periodo (Año)</label>
                    <InputNumber class="form-control" @bind-Value="presupuestoActual.PeriodoAnio" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Fecha Solicitud</label>
                    <InputDate class="form-control" @bind-Value="presupuestoActual.FechaSolicitud" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Fecha Aprobación</label>
                    <InputDate class="form-control" @bind-Value="presupuestoActual.FechaAprobacion" />
                </div>

                <div class="col-12">
                    <label class="form-label">Observaciones</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="presupuestoActual.Observaciones" />
                </div>
            </div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i>
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarPresupuesto" disabled="@(!existePresupuesto)">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existePresupuesto)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- BLOQUE LISTA -->
<div class="card border-success shadow-sm">
    <div class="card-header bg-success text-white fw-bold">
        <i class="bi bi-table me-2"></i>Lista de Presupuestos
    </div>

    <div class="card-body">
        @if (cargando)
        {
            <p><em><i class="bi bi-arrow-repeat"></i> Cargando presupuestos...</em></p>
        }
        else if (listaPresupuestos.Count == 0)
        {
            <div class="alert alert-info mb-0">
                <i class="bi bi-info-circle me-2"></i>No hay presupuestos registrados.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Proyecto</th>
                            <th>Monto Solicitado</th>
                            <th>Monto Aprobado</th>
                            <th>Estado</th>
                            <th>Periodo</th>
                            <th>Solicitud</th>
                            <th>Aprobación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in listaPresupuestos)
                        {
                            <tr>
                                <td>@p.Id</td>
                                <td>@GetProyectoTitulo(p.IdProyecto)</td>
                                <td>@p.MontoSolicitado.ToString("C")</td>
                                <td>@(p.MontoAprobado?.ToString("C") ?? "—")</td>
                                <td>@p.Estado</td>
                                <td>@p.PeriodoAnio</td>
                                <td>@p.FechaSolicitud?.ToString("yyyy-MM-dd")</td>
                                <td>@p.FechaAprobacion?.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-success" @onclick="@(() => CargarEnFormulario(p))">
                                        <i class="bi bi-upload"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Presupuesto> listaPresupuestos = new();
    private List<Proyecto> listaProyectos = new();
    private Presupuesto presupuestoActual = new();
    private int idBusqueda;
    private bool existePresupuesto = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/presupuesto";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas();
        await CargarPresupuestos();
    }

    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            listaProyectos = (await cliente.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>("api/proyecto"))?.Datos ?? new();
        }
        catch
        {
            listaProyectos = new();
        }
    }

    private async Task CargarPresupuestos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<Presupuesto>>>(urlBaseApi);
            listaPresupuestos = resp?.Datos ?? new();
            mensaje = $"Se cargaron {listaPresupuestos.Count} presupuesto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar presupuestos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Presupuesto>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un presupuesto con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existePresupuesto = false;
                presupuestoActual = new Presupuesto();
                return;
            }

            presupuestoActual = respuesta.Datos.First();
            existePresupuesto = true;
            mensaje = "Presupuesto cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existePresupuesto)
            await ActualizarPresupuesto();
        else
            await CrearPresupuesto();
    }

    private async Task CrearPresupuesto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            var payload = new
            {
                IdProyecto = presupuestoActual.IdProyecto,
                MontoSolicitado = presupuestoActual.MontoSolicitado,
                MontoAprobado = presupuestoActual.MontoAprobado,
                Estado = presupuestoActual.Estado,
                PeriodoAnio = presupuestoActual.PeriodoAnio,
                FechaSolicitud = presupuestoActual.FechaSolicitud,
                FechaAprobacion = presupuestoActual.FechaAprobacion,
                Observaciones = presupuestoActual.Observaciones
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Presupuesto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarPresupuestos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarPresupuesto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            var payload = new
            {                
                IdProyecto = presupuestoActual.IdProyecto,
                MontoSolicitado = presupuestoActual.MontoSolicitado,
                MontoAprobado = presupuestoActual.MontoAprobado,
                Estado = presupuestoActual.Estado,
                PeriodoAnio = presupuestoActual.PeriodoAnio,
                FechaSolicitud = presupuestoActual.FechaSolicitud,
                FechaAprobacion = presupuestoActual.FechaAprobacion,
                Observaciones = presupuestoActual.Observaciones
            };

            var ruta = $"{urlBaseApi}/id/{presupuestoActual.Id}";
            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Presupuesto actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarPresupuestos();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (presupuestoActual.Id == 0) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el presupuesto ID {presupuestoActual.Id}?");
        if (confirmado)
            await EliminarPresupuesto(presupuestoActual.Id);
    }

    private async Task EliminarPresupuesto(int id)
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var ruta = $"{urlBaseApi}/id/{id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Presupuesto eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarPresupuestos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Presupuesto p)
    {
        presupuestoActual = new Presupuesto
        {
            Id = p.Id,
            IdProyecto = p.IdProyecto,
            MontoSolicitado = p.MontoSolicitado,
            MontoAprobado = p.MontoAprobado,
            Estado = p.Estado,
            PeriodoAnio = p.PeriodoAnio,
            FechaSolicitud = p.FechaSolicitud,
            FechaAprobacion = p.FechaAprobacion,
            Observaciones = p.Observaciones
        };
        existePresupuesto = true;
        mensaje = "Presupuesto cargado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        presupuestoActual = new Presupuesto();
        existePresupuesto = false;
        mensaje = "";
    }

    private string GetProyectoTitulo(int id)
        => listaProyectos.FirstOrDefault(x => x.Id == id)?.Titulo ?? $"#{id}";
}