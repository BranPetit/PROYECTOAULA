@page "/tipoproyectos"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Tipos de Proyecto</PageTitle>

<h3>Gestión de Tipos de Proyecto</h3>

<!-- Botones globales -->
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTiposProyecto">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<!-- Buscador por ID -->
<div class="mb-3 d-flex gap-2">
    <InputNumber class="form-control" placeholder="Ingrese ID para buscar" @bind-Value="idBusqueda" />
    <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
</div>

<!-- Mensajes de estado -->
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Tipo de Proyecto</h4>

<EditForm Model="tipoProyectoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Nombre *</label>
            <InputText class="form-control" @bind-Value="tipoProyectoActual.Nombre" />
            <ValidationMessage For="@(() => tipoProyectoActual.Nombre)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Descripción *</label>
            <InputText class="form-control" @bind-Value="tipoProyectoActual.Descripcion" />
            <ValidationMessage For="@(() => tipoProyectoActual.Descripcion)" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarTipoProyecto" disabled="@(!existeTipoProyecto)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeTipoProyecto)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando tipos de proyecto...</em></p>
}
else if (listaTiposProyecto.Count == 0)
{
    <p>No hay tipos de proyecto disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in listaTiposProyecto)
            {
                <tr>
                    <td>@e.Id</td>
                    <td>@e.Nombre</td>
                    <td>@e.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(e))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoProyecto> listaTiposProyecto = new();
    [SupplyParameterFromForm]
    private TipoProyecto tipoProyectoActual { get; set; } = new();

    private int idBusqueda { get; set; }
    private bool existeTipoProyecto = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/tipoproyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposProyecto();
    }

    private async Task CargarTiposProyecto()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProyecto>>>(urlBaseApi);
            listaTiposProyecto = respuesta?.Datos ?? new();
            mensaje = $"Se cargaron {listaTiposProyecto.Count} tipo(s) de proyecto.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProyecto>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un tipo de proyecto con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeTipoProyecto = false;
                textoBotonGuardar = "Crear";
                tipoProyectoActual = new TipoProyecto();
                return;
            }

            var encontrado = respuesta.Datos.First();
            tipoProyectoActual = encontrado;
            existeTipoProyecto = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Tipo de proyecto cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"No existe el tipo de proyecto con ID {idBusqueda}: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeTipoProyecto)
            await ActualizarTipoProyecto();
        else
            await CrearTipoProyecto();
    }

    private async Task CrearTipoProyecto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
            var tipoProyectoParaCrear = new
            {
                Nombre = tipoProyectoActual.Nombre,
                Descripcion = tipoProyectoActual.Descripcion
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, tipoProyectoParaCrear);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Tipo de proyecto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTiposProyecto();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarTipoProyecto()
{
    try
    {
        var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
        var ruta = $"{urlBaseApi}/id/{tipoProyectoActual.Id}";

        var tipoProyectoParaActualizar = new
        {
            Nombre = tipoProyectoActual.Nombre,
            Descripcion = tipoProyectoActual.Descripcion
        };

        var resp = await cliente.PutAsJsonAsync(ruta, tipoProyectoParaActualizar);

        if (resp.IsSuccessStatusCode)
        {
            mensaje = "Actualizado correctamente.";
            claseAviso = "alert alert-success";
            await CargarTiposProyecto();
        }
        else
        {
            mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"Error al actualizar: {ex.Message}";
        claseAviso = "alert alert-danger";
    }
}

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el tipo de proyecto con ID {tipoProyectoActual.Id}?");
        if (confirmado)
            await EliminarTipoProyecto();
    }

    private async Task EliminarTipoProyecto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
            var ruta = $"{urlBaseApi}/id/{tipoProyectoActual.Id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTiposProyecto();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProyecto");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(TipoProyecto e)
    {
        tipoProyectoActual = new TipoProyecto
        {
            Id = e.Id,
            Nombre = e.Nombre,
            Descripcion = e.Descripcion
        };
        existeTipoProyecto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Tipo de proyecto cargado desde listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tipoProyectoActual = new TipoProyecto();
        tipoProyectoActual.Id = 0;
        existeTipoProyecto = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
        claseAviso = "alert alert-info";
    }
}