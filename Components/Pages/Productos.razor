@page "/productos"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gestión de Productos</PageTitle>

<h3>Gestión de Productos</h3>

<!-- Botones principales -->
<div class="mb-3 d-flex gap-2">
    <button class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button class="btn btn-outline-primary" @onclick="CargarProductos">Mostrar todos</button>
    <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<!-- Buscador -->
<div class="mb-3 d-flex gap-2">
    <InputNumber class="form-control" placeholder="Ingrese ID de producto" @bind-Value="idBusqueda" />
    <button class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Producto</h4>

<EditForm Model="productoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Tipo de Producto *</label>
            <InputSelect class="form-select" @bind-Value="productoActual.IdTipoProducto">
                <option value="0">-- Seleccione --</option>
                @foreach (var t in listaTiposProducto)
                {
                    <option value="@t.Id">@t.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="col-md-4">
            <label class="form-label">Título *</label>
            <InputText class="form-control" @bind-Value="productoActual.Titulo" />
        </div>

        <div class="col-md-4">
            <label class="form-label">Código</label>
            <InputText class="form-control" @bind-Value="productoActual.Codigo" />
        </div>

        <div class="col-md-12">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control" @bind-Value="productoActual.Descripcion" rows="3" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Fecha de Inicio</label>
            <InputDate class="form-control" @bind-Value="productoActual.FechaInicio" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Fecha Fin Prevista</label>
            <InputDate class="form-control" @bind-Value="productoActual.FechaFinPrevista" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Fecha Modificación</label>
            <InputDate class="form-control" @bind-Value="productoActual.FechaModificacion" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Fecha Finalización</label>
            <InputDate class="form-control" @bind-Value="productoActual.FechaFinalizacion" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Ruta del Logo</label>
            <InputText class="form-control" @bind-Value="productoActual.RutaLogo" placeholder="Ej: /imagenes/producto.png" />
        </div>
    </div>

    <div class="mt-3 d-flex gap-2 flex-wrap">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarProducto" disabled="@(!existeProducto)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeProducto)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando productos...</em></p>
}
else if (listaProductos.Count == 0)
{
    <p>No hay productos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Código</th>
                <th>Título</th>
                <th>Tipo</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin Prevista</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in listaProductos)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Codigo</td>
                    <td>@p.Titulo</td>
                    <td>@(GetTipoProductoNombre(p.IdTipoProducto))</td>
                    <td>@p.FechaInicio?.ToString("yyyy-MM-dd")</td>
                    <td>@p.FechaFinPrevista?.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(p))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Producto> listaProductos = new();
    private List<TipoProducto> listaTiposProducto = new();

    private Producto productoActual = new();
    private int idBusqueda;
    private bool existeProducto = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/producto";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas();
        await CargarProductos();
    }

    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var respTipos = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>("api/tipoproducto");
            listaTiposProducto = respTipos?.Datos ?? new();
        }
        catch
        {
            // no bloquear la UI si falla la carga de tipos
            listaTiposProducto = new();
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<Producto>>>(urlBaseApi);
            listaProductos = resp?.Datos ?? new();
            mensaje = $"Se cargaron {listaProductos.Count} producto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar productos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Producto>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un producto con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeProducto = false;
                textoBotonGuardar = "Crear";
                productoActual = new Producto();
                return;
            }

            var encontrado = respuesta.Datos.First();
            productoActual = encontrado;
            existeProducto = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Producto cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeProducto)
            await ActualizarProducto();
        else
            await CrearProducto();
    }

    private async Task CrearProducto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var payload = new
            {
                IdTipoProducto = productoActual.IdTipoProducto,
                Codigo = productoActual.Codigo,
                Titulo = productoActual.Titulo,
                Descripcion = productoActual.Descripcion,
                FechaInicio = productoActual.FechaInicio,
                FechaFinPrevista = productoActual.FechaFinPrevista,
                FechaModificacion = productoActual.FechaModificacion,
                FechaFinalizacion = productoActual.FechaFinalizacion,
                RutaLogo = productoActual.RutaLogo
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Producto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProductos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarProducto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var ruta = $"{urlBaseApi}/id/{productoActual.Id}";

            var payload = new
            {
                IdTipoProducto = productoActual.IdTipoProducto,
                Codigo = productoActual.Codigo,
                Titulo = productoActual.Titulo,
                Descripcion = productoActual.Descripcion,
                FechaInicio = productoActual.FechaInicio,
                FechaFinPrevista = productoActual.FechaFinPrevista,
                FechaModificacion = productoActual.FechaModificacion,
                FechaFinalizacion = productoActual.FechaFinalizacion,
                RutaLogo = productoActual.RutaLogo
            };

            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Producto actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProductos();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (productoActual.Id == 0) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el producto {productoActual.Titulo} (ID {productoActual.Id})?");
        if (confirmado)
            await EliminarProducto(productoActual.Id);
    }

    private async Task EliminarProducto(int id)
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var ruta = $"{urlBaseApi}/id/{id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Producto eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProductos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProducto");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Producto p)
    {
        productoActual = new Producto
        {
            Id = p.Id,
            IdTipoProducto = p.IdTipoProducto,
            Codigo = p.Codigo,
            Titulo = p.Titulo,
            Descripcion = p.Descripcion,
            FechaInicio = p.FechaInicio,
            FechaFinPrevista = p.FechaFinPrevista,
            FechaModificacion = p.FechaModificacion,
            FechaFinalizacion = p.FechaFinalizacion,
            RutaLogo = p.RutaLogo
        };
        existeProducto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Producto cargado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        productoActual = new Producto();
        existeProducto = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
    }

    private string GetTipoProductoNombre(int id)
        => listaTiposProducto.FirstOrDefault(x => x.Id == id)?.Nombre ?? $"#{id}";
}