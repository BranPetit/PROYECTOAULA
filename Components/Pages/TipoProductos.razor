@page "/tipoproductos"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Tipos de producto</PageTitle>

<h3>Gestión de Tipos de producto</h3>

<!-- Botones globales -->
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarTiposProducto">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<!-- Buscador por ID -->
<div class="mb-3 d-flex gap-2">
    <InputNumber class="form-control" placeholder="Ingrese ID para buscar" @bind-Value="idBusqueda" />
    <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
</div>

<!-- Mensajes de estado -->
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Tipo de producto</h4>

<EditForm Model="tipoProductoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Nombre *</label>
            <InputText class="form-control" @bind-Value="tipoProductoActual.Nombre" />
            <ValidationMessage For="@(() => tipoProductoActual.Nombre)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Descripción *</label>
            <InputText class="form-control" @bind-Value="tipoProductoActual.Descripcion" />
            <ValidationMessage For="@(() => tipoProductoActual.Descripcion)" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarTipoProducto" disabled="@(!existeTipoProducto)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeTipoProducto)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando tipos de producto...</em></p>
}
else if (listaTiposProducto.Count == 0)
{
    <p>No hay tipos de producto disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in listaTiposProducto)
            {
                <tr>
                    <td>@e.Id</td>
                    <td>@e.Nombre</td>
                    <td>@e.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(e))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoProducto> listaTiposProducto = new();
    [SupplyParameterFromForm]
    private TipoProducto tipoProductoActual { get; set; } = new();

    private int idBusqueda { get; set; }
    private bool existeTipoProducto = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/tipoproducto";

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposProducto();
    }

    private async Task CargarTiposProducto()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>(urlBaseApi);
            listaTiposProducto = respuesta?.Datos ?? new();
            mensaje = $"Se cargaron {listaTiposProducto.Count} tipo(s) de producto.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un tipo de producto con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeTipoProducto = false;
                textoBotonGuardar = "Crear";
                tipoProductoActual = new TipoProducto();
                return;
            }

            var encontrado = respuesta.Datos.First();
            tipoProductoActual = encontrado;
            existeTipoProducto = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Tipo de producto cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"No existe el tipo de producto con ID {idBusqueda}: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeTipoProducto)
            await ActualizarTipoProducto();
        else
            await CrearTipoProducto();
    }

    private async Task CrearTipoProducto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
            var tipoProductoParaCrear = new
            {
                Nombre = tipoProductoActual.Nombre,
                Descripcion = tipoProductoActual.Descripcion
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, tipoProductoParaCrear);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Tipo de producto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTiposProducto();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

private async Task ActualizarTipoProducto()
{
    try
    {
        var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
        var ruta = $"{urlBaseApi}/id/{tipoProductoActual.Id}";

        // Enviar solo los campos editables, sin Id
        var tipoProductoParaActualizar = new
        {
            Nombre = tipoProductoActual.Nombre,
            Descripcion = tipoProductoActual.Descripcion
        };

        var resp = await cliente.PutAsJsonAsync(ruta, tipoProductoParaActualizar);

        if (resp.IsSuccessStatusCode)
        {
            mensaje = "Actualizado correctamente.";
            claseAviso = "alert alert-success";
            await CargarTiposProducto();
        }
        else
        {
            mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
            claseAviso = "alert alert-danger";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"Error al actualizar: {ex.Message}";
        claseAviso = "alert alert-danger";
    }
}

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el tipo de producto con ID {tipoProductoActual.Id}?");
        if (confirmado)
            await EliminarTipoProducto();
    }

    private async Task EliminarTipoProducto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
            var ruta = $"{urlBaseApi}/id/{tipoProductoActual.Id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarTiposProducto();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiTipoProducto");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(TipoProducto e)
    {
        tipoProductoActual = new TipoProducto
        {
            Id = e.Id,
            Nombre = e.Nombre,
            Descripcion = e.Descripcion
        };
        existeTipoProducto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Tipo de producto cargado desde listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        tipoProductoActual = new TipoProducto();
        tipoProductoActual.Id = 0;
        existeTipoProducto = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
        claseAviso = "alert alert-info";
    }
}