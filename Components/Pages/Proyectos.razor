@page "/proyectos"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gestión de Proyectos</PageTitle>

<!-- ENCABEZADO PRINCIPAL -->
<div class="d-flex align-items-center mb-3">
    <i class="bi bi-folder-fill fs-3 text-primary me-2"></i>
    <h3 class="mb-0 fw-bold">Gestión de Proyectos</h3>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso shadow-sm mb-3" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>@mensaje
    </div>
}

<!-- BLOQUE FORMULARIO -->
<div class="card border-primary shadow-sm mb-4">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-pencil-square me-2"></i>Formulario de Proyecto
    </div>

    <div class="card-body">
        <div class="d-flex flex-wrap gap-2 mb-3">
            <button class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <i class="bi bi-wifi"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="CargarProyectos">
                <i class="bi bi-list"></i>
            </button>
            <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser"></i>
            </button>
        </div>

        <div class="input-group mb-4">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <InputNumber class="form-control" placeholder="Ingrese ID del proyecto" @bind-Value="idBusqueda" />
            <button class="btn btn-secondary" @onclick="BuscarPorId">
                <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>

        <EditForm Model="proyectoActual" OnValidSubmit="GuardarSegunEstado">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="proyectoActual.Titulo" />
                    <ValidationMessage For="@(() => proyectoActual.Titulo)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Código</label>
                    <InputText class="form-control" @bind-Value="proyectoActual.Codigo" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Responsable *</label>
                    <InputSelect class="form-select" @bind-Value="proyectoActual.IdResponsable">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var r in listaResponsables)
                        {
                            <option value="@r.Id">@r.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => proyectoActual.IdResponsable)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Tipo de Proyecto *</label>
                    <InputSelect class="form-select" @bind-Value="proyectoActual.IdTipoProyecto">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var t in listaTiposProyecto)
                        {
                            <option value="@t.Id">@t.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => proyectoActual.IdTipoProyecto)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Proyecto Padre</label>
                    <InputSelect class="form-select" @bind-Value="proyectoActual.IdProyectoPadre">
                        <option value="">-- Ninguno --</option>
                        @foreach (var p in listaProyectosPadre.Where(x => x.Id != proyectoActual.Id))
                        {
                            <option value="@p.Id">@p.Titulo</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Fecha Inicio</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaInicio" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Fecha Fin Prevista</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaFinPrevista" />
                </div>

                <!-- NUEVOS CAMPOS -->
                <div class="col-md-4">
                    <label class="form-label">Fecha Modificación</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaModificacion" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Fecha Finalización</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaFinalizacion" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Ruta del Logo</label>
                    <InputText class="form-control" placeholder="Ej: /logos/proyecto.png" @bind-Value="proyectoActual.RutaLogo" />
                </div>

                <div class="col-12">
                    <label class="form-label">Descripción</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="proyectoActual.Descripcion" />
                </div>
            </div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i>
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarProyecto" disabled="@(!existeProyecto)">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeProyecto)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- BLOQUE LISTA -->
<div class="card border-primary shadow-sm">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-table me-2"></i>Lista de Proyectos
    </div>

    <div class="card-body">
        @if (cargando)
        {
            <p><em><i class="bi bi-arrow-repeat"></i> Cargando proyectos...</em></p>
        }
        else if (listaProyectos.Count == 0)
        {
            <div class="alert alert-info mb-0">
                <i class="bi bi-info-circle me-2"></i>No hay proyectos registrados.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Código</th>
                            <th>Título</th>
                            <th>Responsable</th>
                            <th>Tipo Proyecto</th>
                            <th>Inicio</th>
                            <th>Fin Prevista</th>
                            <th>Modificación</th>
                            <th>Finalización</th>
                            <th>Proyecto Padre</th>
                            <th>Logo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in listaProyectos)
                        {
                            <tr>
                                <td>@p.Id</td>
                                <td>@p.Codigo</td>
                                <td>@p.Titulo</td>
                                <td>@(GetResponsableNombre(p.IdResponsable))</td>
                                <td>@(GetTipoProyectoNombre(p.IdTipoProyecto))</td>
                                <td>@p.FechaInicio?.ToString("yyyy-MM-dd")</td>
                                <td>@p.FechaFinPrevista?.ToString("yyyy-MM-dd")</td>
                                <td>@p.FechaModificacion?.ToString("yyyy-MM-dd")</td>
                                <td>@p.FechaFinalizacion?.ToString("yyyy-MM-dd")</td>
                                <td>@GetProyectoPadreTitulo(p.IdProyectoPadre)</td>
                                <td>
                                    @if (!string.IsNullOrWhiteSpace(p.RutaLogo))
                                    {
                                        <img src="@p.RutaLogo" alt="Logo" width="40" height="40" class="rounded shadow-sm" />
                                    }
                                    else
                                    {
                                        <span class="text-muted">—</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(p))">
                                        <i class="bi bi-upload"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Proyecto> listaProyectos = new();
    private List<Responsable> listaResponsables = new();
    private List<TipoProyecto> listaTiposProyecto = new();
    private List<Proyecto> listaProyectosPadre = new();
    private Proyecto proyectoActual = new();
    private int idBusqueda;
    private bool existeProyecto = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/proyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas();
        await CargarProyectos();
    }

    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            listaResponsables = (await cliente.GetFromJsonAsync<RespuestaApi<List<Responsable>>>("api/responsable"))?.Datos ?? new();
            listaTiposProyecto = (await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProyecto>>>("api/tipoproyecto"))?.Datos ?? new();
            listaProyectosPadre = (await cliente.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>("api/proyecto"))?.Datos ?? new();
        }
        catch
        {
            listaResponsables = new();
            listaTiposProyecto = new();
            listaProyectosPadre = new();
        }
    }

    private async Task CargarProyectos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(urlBaseApi);
            listaProyectos = resp?.Datos ?? new();
            mensaje = $"Se cargaron {listaProyectos.Count} proyecto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar proyectos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un proyecto con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeProyecto = false;
                proyectoActual = new Proyecto();
                return;
            }

            proyectoActual = respuesta.Datos.First();
            existeProyecto = true;
            mensaje = "Proyecto cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeProyecto)
            await ActualizarProyecto();
        else
            await CrearProyecto();
    }

    private async Task CrearProyecto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var payload = new
            {
                Codigo = proyectoActual.Codigo,
                Titulo = proyectoActual.Titulo,
                IdResponsable = proyectoActual.IdResponsable,
                IdTipoProyecto = proyectoActual.IdTipoProyecto,
                IdProyectoPadre = proyectoActual.IdProyectoPadre,
                Descripcion = proyectoActual.Descripcion,
                FechaInicio = proyectoActual.FechaInicio,
                FechaFinPrevista = proyectoActual.FechaFinPrevista,
                FechaFinalizacion = proyectoActual.FechaFinalizacion,
                FechaModificacion = DateTime.Now,
                RutaLogo = proyectoActual.RutaLogo
            };
            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Proyecto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarProyecto()
    {
        try
        {
            proyectoActual.FechaModificacion = DateTime.Now;
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var ruta = $"{urlBaseApi}/id/{proyectoActual.Id}";
            var payload = new
            {
                Codigo = proyectoActual.Codigo,
                Titulo = proyectoActual.Titulo,
                IdResponsable = proyectoActual.IdResponsable,
                IdTipoProyecto = proyectoActual.IdTipoProyecto,
                IdProyectoPadre = proyectoActual.IdProyectoPadre,
                Descripcion = proyectoActual.Descripcion,
                FechaInicio = proyectoActual.FechaInicio,
                FechaFinPrevista = proyectoActual.FechaFinPrevista,
                FechaFinalizacion = proyectoActual.FechaFinalizacion,
                FechaModificacion = DateTime.Now,
                RutaLogo = proyectoActual.RutaLogo
            };
            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Proyecto actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (proyectoActual.Id == 0) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el proyecto '{proyectoActual.Titulo}' (ID {proyectoActual.Id})?");
        if (confirmado)
            await EliminarProyecto(proyectoActual.Id);
    }

    private async Task EliminarProyecto(int id)
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var ruta = $"{urlBaseApi}/id/{id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Proyecto eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Proyecto p)
    {
        proyectoActual = new Proyecto
        {
            Id = p.Id,
            Codigo = p.Codigo,
            Titulo = p.Titulo,
            IdResponsable = p.IdResponsable,
            IdTipoProyecto = p.IdTipoProyecto,
            IdProyectoPadre = p.IdProyectoPadre,
            Descripcion = p.Descripcion,
            FechaInicio = p.FechaInicio,
            FechaFinPrevista = p.FechaFinPrevista,
            FechaModificacion = p.FechaModificacion,
            FechaFinalizacion = p.FechaFinalizacion,
            RutaLogo = p.RutaLogo
        };
        existeProyecto = true;
        mensaje = "Proyecto cargado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        proyectoActual = new Proyecto();
        existeProyecto = false;
        mensaje = "";
    }

    private string GetResponsableNombre(int id)
        => listaResponsables.FirstOrDefault(x => x.Id == id)?.Nombre ?? $"#{id}";

    private string GetTipoProyectoNombre(int id)
        => listaTiposProyecto.FirstOrDefault(x => x.Id == id)?.Nombre ?? $"#{id}";

    private string GetProyectoPadreTitulo(int? id)
        => listaProyectosPadre.FirstOrDefault(x => x.Id == id)?.Titulo ?? "—";
}