@page "/objetivos"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Objetivos Estratégicos</PageTitle>

<h3>Gestión de Objetivos Estratégicos</h3>

<!-- Botones globales -->
<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarObjetivos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<!-- Buscador por ID -->
<div class="mb-3 d-flex gap-2">
    <InputNumber class="form-control" placeholder="Ingrese ID para buscar" @bind-Value="idBusqueda" />
    <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
</div>

<!-- Mensajes -->
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso" role="alert">@mensaje</div>
}

<h4>Formulario de Objetivo Estratégico</h4>

<EditForm Model="objetivoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Variable Estratégica *</label>
            <InputSelect class="form-select" @bind-Value="objetivoActual.IdVariable">
                <option value="0">-- Seleccione --</option>
                @foreach (var v in listaVariables)
                {
                    <option value="@v.Id">@v.Titulo</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => objetivoActual.IdVariable)" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Título *</label>
            <InputText class="form-control" @bind-Value="objetivoActual.Titulo" />
            <ValidationMessage For="@(() => objetivoActual.Titulo)" />
        </div>
    </div>

    <div class="row g-3 mt-1">
        <div class="col-md-12">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control" rows="3" @bind-Value="objetivoActual.Descripcion" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarObjetivo" disabled="@(!existeObjetivo)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeObjetivo)">Eliminar</button>
    </div>
</EditForm>

<hr />

@if (cargando)
{
    <p><em>Cargando objetivos...</em></p>
}
else if (listaObjetivos.Count == 0)
{
    <p>No hay objetivos registrados.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Variable</th>
                <th>Título</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var o in listaObjetivos)
            {
                <tr>
                    <td>@o.Id</td>
                    <td>@(GetVariableTitulo(o.IdVariable))</td>
                    <td>@o.Titulo</td>
                    <td>@o.Descripcion</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary"
                                @onclick="@(() => CargarEnFormulario(o))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ObjetivoEstrategico> listaObjetivos = new();
    private List<VariableEstrategica> listaVariables = new();

    private ObjetivoEstrategico objetivoActual { get; set; } = new();

    private int idBusqueda { get; set; }
    private bool existeObjetivo = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    private const string urlBaseApi = "api/objetivoestrategico";

    protected override async Task OnInitializedAsync()
    {
        await CargarVariables();
        await CargarObjetivos();
    }

    private async Task CargarVariables()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiVariableEstrategica");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<VariableEstrategica>>>("api/variableestrategica");
            listaVariables = resp?.Datos ?? new();
        }
        catch { }
    }

    private async Task CargarObjetivos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(urlBaseApi);
            listaObjetivos = respuesta?.Datos ?? new();
            mensaje = $"Se cargaron {listaObjetivos.Count} objetivo(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un objetivo con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeObjetivo = false;
                textoBotonGuardar = "Crear";
                objetivoActual = new ObjetivoEstrategico();
                return;
            }

            objetivoActual = respuesta.Datos.First();
            existeObjetivo = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Objetivo cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeObjetivo)
            await ActualizarObjetivo();
        else
            await CrearObjetivo();
    }

    private async Task CrearObjetivo()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");

            var payload = new
            {
                IdVariable = objetivoActual.IdVariable,
                Titulo = objetivoActual.Titulo,
                Descripcion = objetivoActual.Descripcion
            };

            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Objetivo creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarObjetivo()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{objetivoActual.Id}";

            var payload = new
            {
                IdVariable = objetivoActual.IdVariable,
                Titulo = objetivoActual.Titulo,
                Descripcion = objetivoActual.Descripcion
            };

            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el objetivo con ID {objetivoActual.Id}?");
        if (confirmado)
            await EliminarObjetivo();
    }

    private async Task EliminarObjetivo()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{objetivoActual.Id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(ObjetivoEstrategico o)
    {
        objetivoActual = new ObjetivoEstrategico
        {
            Id = o.Id,
            IdVariable = o.IdVariable,
            Titulo = o.Titulo,
            Descripcion = o.Descripcion
        };
        existeObjetivo = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Objetivo cargado desde listado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        objetivoActual = new ObjetivoEstrategico();
        existeObjetivo = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    private string GetVariableTitulo(int idVariable)
    {
        var v = listaVariables?.FirstOrDefault(x => x.Id == idVariable);
        return v is null ? $"#{idVariable}" : v.Titulo;
    }
}