@page "/objetivos-estrategicos"
@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Gestión de Objetivos Estratégicos</PageTitle>

<!-- ENCABEZADO PRINCIPAL -->
<div class="d-flex align-items-center mb-3">
    <i class="bi bi-bullseye fs-3 text-primary me-2"></i>
    <h3 class="mb-0 fw-bold">Gestión de Objetivos Estratégicos</h3>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="@claseAviso shadow-sm mb-3" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>@mensaje
    </div>
}

<!-- BLOQUE FORMULARIO -->
<div class="card border-primary shadow-sm mb-4">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-pencil-square me-2"></i>Formulario de Objetivo Estratégico
    </div>

    <div class="card-body">
        <div class="d-flex flex-wrap gap-2 mb-3">
            <button class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <i class="bi bi-wifi"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="CargarObjetivos">
                <i class="bi bi-list"></i>
            </button>
            <button class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser"></i>
            </button>
        </div>

        <div class="input-group mb-4">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <InputNumber class="form-control" placeholder="Ingrese ID de objetivo" @bind-Value="idBusqueda" />
            <button class="btn btn-secondary" @onclick="BuscarPorId">
                <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>

        <EditForm Model="objetivoActual" OnValidSubmit="GuardarSegunEstado">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Variable Estratégica *</label>
                    <InputSelect class="form-select" @bind-Value="objetivoActual.IdVariable">
                        <option value="0">-- Seleccione --</option>
                        @foreach (var v in listaVariables)
                        {
                            <option value="@v.Id">@v.Titulo</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => objetivoActual.IdVariable)" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="objetivoActual.Titulo" />
                    <ValidationMessage For="@(() => objetivoActual.Titulo)" />
                </div>

                <div class="col-md-12">
                    <label class="form-label">Descripción</label>
                    <InputTextArea class="form-control" @bind-Value="objetivoActual.Descripcion" rows="3" />
                </div>
            </div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i>
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarObjetivo" disabled="@(!existeObjetivo)">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar" disabled="@(!existeObjetivo)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </EditForm>
    </div>
</div>

<!-- BLOQUE LISTA -->
<div class="card border-primary shadow-sm">
    <div class="card-header bg-primary text-white fw-bold">
        <i class="bi bi-table me-2"></i>Lista de Objetivos Estratégicos
    </div>

    <div class="card-body">
        @if (cargando)
        {
            <p><em><i class="bi bi-arrow-repeat"></i> Cargando objetivos...</em></p>
        }
        else if (listaObjetivos.Count == 0)
        {
            <div class="alert alert-info mb-0">
                <i class="bi bi-info-circle me-2"></i>No hay objetivos registrados.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Título</th>
                            <th>Variable Estratégica</th>
                            <th>Descripción</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var o in listaObjetivos)
                        {
                            <tr>
                                <td>@o.Id</td>
                                <td>@o.Titulo</td>
                                <td>@(GetVariableNombre(o.IdVariable))</td>
                                <td>@o.Descripcion</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(o))">
                                        <i class="bi bi-upload"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<ObjetivoEstrategico> listaObjetivos = new();
    private List<VariableEstrategica> listaVariables = new();
    private ObjetivoEstrategico objetivoActual = new();
    private int idBusqueda;
    private bool existeObjetivo = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;
    private const string urlBaseApi = "api/objetivoestrategico";

    protected override async Task OnInitializedAsync()
    {
        await CargarOpcionesRelacionadas();
        await CargarObjetivos();
    }

    private async Task CargarOpcionesRelacionadas()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var respVars = await cliente.GetFromJsonAsync<RespuestaApi<List<VariableEstrategica>>>("api/variableestrategica");
            listaVariables = respVars?.Datos ?? new();
        }
        catch { listaVariables = new(); }
    }

    private async Task CargarObjetivos()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var resp = await cliente.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(urlBaseApi);
            listaObjetivos = resp?.Datos ?? new();
            mensaje = $"Se cargaron {listaObjetivos.Count} objetivo(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al listar objetivos: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
        finally { cargando = false; }
    }

    private async Task BuscarPorId()
    {
        if (idBusqueda == 0)
        {
            mensaje = "Debe indicar un ID válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{idBusqueda}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(ruta);

            if (respuesta?.Datos is null || !respuesta.Datos.Any())
            {
                mensaje = $"No se encontró un objetivo con ID {idBusqueda}.";
                claseAviso = "alert alert-warning";
                existeObjetivo = false;
                textoBotonGuardar = "Crear";
                objetivoActual = new ObjetivoEstrategico();
                return;
            }

            objetivoActual = respuesta.Datos.First();
            existeObjetivo = true;
            textoBotonGuardar = "Actualizar";
            mensaje = "Objetivo cargado.";
            claseAviso = "alert alert-success";
        }
        catch (Exception ex)
        {
            mensaje = $"Error al buscar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        if (existeObjetivo)
            await ActualizarObjetivo();
        else
            await CrearObjetivo();
    }

    private async Task CrearObjetivo()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var payload = new
            {
                IdVariable = objetivoActual.IdVariable,
                Titulo = objetivoActual.Titulo,
                Descripcion = objetivoActual.Descripcion
            };
            var resp = await cliente.PostAsJsonAsync(urlBaseApi, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Objetivo creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al crear: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al crear: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarObjetivo()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{objetivoActual.Id}";
            var payload = new
            {
                IdVariable = objetivoActual.IdVariable,
                Titulo = objetivoActual.Titulo,
                Descripcion = objetivoActual.Descripcion
            };
            var resp = await cliente.PutAsJsonAsync(ruta, payload);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Objetivo actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
            }
            else
            {
                mensaje = $"Error al actualizar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al actualizar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ConfirmarEliminar()
    {
        if (objetivoActual.Id == 0) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Seguro que desea eliminar el objetivo '{objetivoActual.Titulo}' (ID {objetivoActual.Id})?");
        if (confirmado)
            await EliminarObjetivo(objetivoActual.Id);
    }

    private async Task EliminarObjetivo(int id)
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var ruta = $"{urlBaseApi}/id/{id}";
            var resp = await cliente.DeleteAsync(ruta);

            if (resp.IsSuccessStatusCode)
            {
                mensaje = "Objetivo eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarObjetivos();
                LimpiarFormulario();
            }
            else
            {
                mensaje = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al eliminar: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiObjetivoEstrategico");
            var resp = await cliente.GetAsync(urlBaseApi);
            mensaje = resp.IsSuccessStatusCode ? "Conexión OK." : $"Respuesta {(int)resp.StatusCode}";
            claseAviso = resp.IsSuccessStatusCode ? "alert alert-success" : "alert alert-warning";
        }
        catch (Exception ex)
        {
            mensaje = $"Error de conexión: {ex.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(ObjetivoEstrategico o)
    {
        objetivoActual = new ObjetivoEstrategico
        {
            Id = o.Id,
            IdVariable = o.IdVariable,
            Titulo = o.Titulo,
            Descripcion = o.Descripcion
        };
        existeObjetivo = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Objetivo cargado.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarFormulario()
    {
        objetivoActual = new ObjetivoEstrategico();
        existeObjetivo = false;
        textoBotonGuardar = "Crear";
        mensaje = "";
    }

    private string GetVariableNombre(int id)
        => listaVariables.FirstOrDefault(x => x.Id == id)?.Titulo ?? $"#{id}";
}